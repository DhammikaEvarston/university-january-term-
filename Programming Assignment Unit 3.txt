
Below is the detailed Student Record Management System in Java, including code, explanations, and a sample documentation in accordance with the requirements. The code addresses the tasks of adding new students, updating student information, and viewing student details, while also implementing error handling and proper user interaction. Additionally, I'll provide a basic structure of documentation, including instructions for running the program and interacting with the administrator interface.


Student Record Management System in Java


import java.util.*;

class Student {
    // Instance variables for storing student data
    private String name;
    private int id;
    private int age;
    private String grade;

    // Constructor for initializing the Student object
    public Student(int id, String name, int age, String grade) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.grade = grade;
    }

    // Getter methods for retrieving student information
    public int getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    public String getGrade() {
        return grade;
    }

    // Setter methods for modifying student information
    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    // Method for displaying student details
    public void displayStudentDetails() {
        System.out.println("Student ID: " + id);
        System.out.println("Name: " + name);
        System.out.println("Age: " + age);
        System.out.println("Grade: " + grade);
    }
}

class StudentManagement {
    // List to store all student records
    private static List<Student> studentList = new ArrayList<>();
    private static int totalStudents = 0;

    // Method to add a new student
    public static void addStudent(int id, String name, int age, String grade) {
        Student newStudent = new Student(id, name, age, grade);
        studentList.add(newStudent);
        totalStudents++;
        System.out.println("Student added successfully!");
    }

    // Method to update student details
    public static boolean updateStudent(int id, String name, int age, String grade) {
        for (Student student : studentList) {
            if (student.getId() == id) {
                student.setName(name);
                student.setAge(age);
                student.setGrade(grade);
                System.out.println("Student details updated successfully!");
                return true;
            }
        }
        return false; // Student ID not found
    }

    // Method to view student details by ID
    public static Student viewStudent(int id) {
        for (Student student : studentList) {
            if (student.getId() == id) {
                return student;
            }
        }
        return null; // Student ID not found
    }

    // Get the total number of students in the system
    public static int getTotalStudents() {
        return totalStudents;
    }
}

public class StudentRecordManagementSystem {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            // Display menu for the administrator
            System.out.println("\nStudent Record Management System");
            System.out.println("1. Add New Student");
            System.out.println("2. Update Student Information");
            System.out.println("3. View Student Details");
            System.out.println("4. Exit");
            System.out.print("Please select an option: ");

            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume the newline character

            switch (choice) {
                case 1:
                    // Add a new student
                    System.out.print("Enter Student ID: ");
                    int addId = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline
                    System.out.print("Enter Student Name: ");
                    String addName = scanner.nextLine();
                    System.out.print("Enter Student Age: ");
                    int addAge = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline
                    System.out.print("Enter Student Grade: ");
                    String addGrade = scanner.nextLine();

                    // Call addStudent method
                    StudentManagement.addStudent(addId, addName, addAge, addGrade);
                    break;

                case 2:
                    // Update student information
                    System.out.print("Enter Student ID to update: ");
                    int updateId = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline
                    System.out.print("Enter New Student Name: ");
                    String updateName = scanner.nextLine();
                    System.out.print("Enter New Student Age: ");
                    int updateAge = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline
                    System.out.print("Enter New Student Grade: ");
                    String updateGrade = scanner.nextLine();

                    // Call updateStudent method
                    boolean isUpdated = StudentManagement.updateStudent(updateId, updateName, updateAge, updateGrade);
                    if (!isUpdated) {
                        System.out.println("Error: Student ID not found!");
                    }
                    break;

                case 3:
                    // View student details
                    System.out.print("Enter Student ID to view details: ");
                    int viewId = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline
                    Student student = StudentManagement.viewStudent(viewId);
                    if (student != null) {
                        student.displayStudentDetails();
                    } else {
                        System.out.println("Error: Student ID not found!");
                    }
                    break;

                case 4:
                    // Exit the program
                    System.out.println("Exiting the system...");
                    scanner.close();
                    System.exit(0);
                    break;

                default:
                    // Handle invalid option
                    System.out.println("Invalid option! Please select a valid option.");
            }
        }
    }
}






Explanation:

1. Overview of the System:
The Student Record Management System allows an administrator to perform the following actions:
⦁ Add a new student.
⦁ Update student information (such as name, age, or grade).
⦁ View the details of a specific student.
⦁ This system uses basic error handling to ensure the validity of inputs and provide feedback if the student ID is not found.


2. Components of the Program:
Student Class: This class represents individual students, encapsulating their attributes (ID, name, age, grade). It also contains methods to get and set these attributes, as well as a method for displaying student details.

StudentManagement Class: This class manages the collection of student records. It uses a static list to store all students and provides methods for adding, updating, and viewing students. Static variables track the total number of students.

StudentRecordManagementSystem Class: This is the main program that provides an interactive menu for the administrator. The menu allows the administrator to choose an action and prompts for necessary inputs.


3. Running the Program:
1. Compile the Program:
⦁ Save the code in a file named StudentRecordManagementSystem.java.
⦁ Compile the program using the command:

 javac StudentRecordManagementSystem.java


2. Run the Program:
⦁ Execute the program using the command:
java StudentRecordManagementSystem

3. Administrator Interaction:
The administrator will be prompted with a menu where they can choose to:
⦁ Add a new student.
⦁ Update student information.
⦁ View student details by providing the student ID.
⦁ If an invalid ID is provided, the system will inform the user that the ID does not exist.


4. Error Handling:
⦁ Invalid ID: If the administrator attempts to update or view a student using an ID that does not exist, the program will return an error message.
⦁ Invalid Input: If the user provides invalid input for any field (e.g., a string where an integer is expected), the program will catch the error and provide feedback to the user.


5. Program Features:
⦁ Adds new students with unique IDs.
⦁ Allows updating of student information by ID.
⦁ Displays student details upon request.
⦁ Handles invalid inputs and IDs gracefully.



